definitions:
  models.Category:
    description: Forum category information
    properties:
      description:
        example: General topics and discussions
        type: string
      id:
        example: 1
        type: integer
      name:
        example: General Discussion
        type: string
    type: object
  models.Comment:
    description: Forum comment information
    properties:
      content:
        example: Great post!
        type: string
      created_at:
        example: "2024-03-20T10:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      post_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  models.CreateUserInput:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Post:
    description: Forum post information
    properties:
      category_id:
        example: 1
        type: integer
      content:
        example: This is the first post in our forum
        type: string
      created_at:
        example: "2024-03-20T10:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      title:
        example: Welcome to the forum
        type: string
      updated_at:
        example: "2024-03-20T10:00:00Z"
        type: string
      user_id:
        example: 1
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  service.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  service.Message:
    description: Chat message information
    properties:
      content:
        example: Hello, world!
        type: string
      created_at:
        example: "2024-03-20T10:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
      username:
        example: john_doe
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get access token
      parameters:
      - description: Login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/service.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User registration data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
          schema:
            $ref: '#/definitions/service.AuthResponse'
        "400":
          description: Invalid request data
          schema:
            type: string
        "409":
          description: User already exists
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register new user
      tags:
      - auth
  /api/forum/categories:
    get:
      consumes:
      - application/json
      description: Get a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided data
      parameters:
      - description: Category object
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
      security:
      - Bearer: []
      summary: Create a new category
      tags:
      - categories
  /api/forum/comments:
    get:
      consumes:
      - application/json
      description: Get all comments for a specific post
      parameters:
      - description: Post ID
        in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
      summary: Get comments by post ID
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a new comment with the provided data
      parameters:
      - description: Comment object
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - Bearer: []
      summary: Create a new comment
      tags:
      - comments
  /api/forum/delete_category:
    post:
      consumes:
      - application/json
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted successfully
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a category
      tags:
      - categories
  /api/forum/delete_comment:
    post:
      consumes:
      - application/json
      description: Delete a comment by its ID
      parameters:
      - description: Comment ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a comment
      tags:
      - comments
  /api/forum/delete_post:
    post:
      consumes:
      - application/json
      description: Delete a post by its ID
      parameters:
      - description: Post ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a post
      tags:
      - posts
  /api/forum/posts:
    get:
      consumes:
      - application/json
      description: Get a list of all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post with the provided data
      parameters:
      - description: Post object
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
      security:
      - Bearer: []
      summary: Create a new post
      tags:
      - posts
  /api/forum/posts/{id}:
    get:
      consumes:
      - application/json
      description: Get a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
      summary: Get post by ID
      tags:
      - posts
  /history:
    get:
      description: Get last 50 chat messages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.Message'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get chat history
      tags:
      - chat
  /ws:
    get:
      description: Connect to chat via WebSocket (ws://localhost:3003/ws)
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: WebSocket chat connection
      tags:
      - chat
swagger: "2.0"
